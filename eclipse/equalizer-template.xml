<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="creation d'un nouveau connecteur" enabled="true" name="sConnector">package ${enclosing_package}&#13;
${cursor}&#13;
&#13;
@Service("${primary_type_name}Impl")&#13;
class ${primary_type_name} implements I${primary_type_name} {&#13;
&#13;
	private static final Logger logger = Logger.getLogger(${primary_type_name}.class);&#13;
&#13;
	@Autowired&#13;
	@Qualifier("Client${primary_type_name}")&#13;
	private IEndPointFactory ${primary_type_name}EndPointFactory;&#13;
&#13;
	public List&lt;DeliveryPoint&gt; get${primary_type_name}(String arg) throws BusinessException, TechnicalException {&#13;
		logger.debug("${primary_type_name} with arg : " + arg);&#13;
&#13;
		CXFType service = ${primary_type_name}EndPointFactory.getEndPoint();&#13;
		&#13;
		try {&#13;
			Request ${primary_type_name}Request = createRequest(arg);&#13;
			Response ${primary_type_name}Response = service.getPointsRelais(${primary_type_name}Request);&#13;
&#13;
			logger.debug("${primary_type_name} return code : " + ${primary_type_name}Response.getErrorCode());&#13;
			return mapResponse(${primary_type_name}Response);&#13;
&#13;
		} catch (RuntimeException e) {&#13;
			logger.warn("${primary_type_name} KO " + e);&#13;
			throw new TechnicalException(TechnicalException.ERR_TECH_${primary_type_name});&#13;
		} catch (BusinessException e) {&#13;
			logger.warn("${primary_type_name} KO " + e);&#13;
			throw e;&#13;
		} catch (TechnicalException e) {&#13;
			logger.warn("${primary_type_name} " + e);&#13;
			throw e;&#13;
		}&#13;
&#13;
	}&#13;
&#13;
	public ${primary_type_name}Request createRequest(String arg) {&#13;
		${primary_type_name}Request ${primary_type_name}Request = new ${primary_type_name}Request();&#13;
		${primary_type_name}Request.setValue("value");&#13;
		return ${primary_type_name}Request;&#13;
	}&#13;
&#13;
	public ReturnType mapResponse(${primary_type_name}Response ${primary_type_name}Response) {&#13;
	&#13;
		return new ReturnType&#13;
&#13;
	}&#13;
&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="expect to call a service" enabled="true" name="sEasyMockExpect">service.methode(EasyMock.eq(""));&#13;
EasyMock.expectLastCall().andReturn();</template><template autoinsert="true" context="java" deleted="false" description="Structure d'un test unitaire" enabled="true" name="sTU">	@Test&#13;
	public void checkTest(){&#13;
		// Setup&#13;
	&#13;
		replay();&#13;
		&#13;
		// Test&#13;
		&#13;
		// Verify&#13;
		verify();&#13;
		Assert.assertTrue(true);&#13;
	}</template><template autoinsert="true" context="java" deleted="false" description="System.out.println()" enabled="true" name="sop">System.out.println("${cursor}");</template></templates>